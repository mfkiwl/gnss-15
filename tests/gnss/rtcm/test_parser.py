from io import BytesIO
from numpy.testing import assert_almost_equal

import pytest

from gnss.rtcm.parser import Parser, PREAMBLE
from gnss.rtcm.messages import ReferenceStationAntenna

def test_parse_garbage():
    stream = BytesIO(
        b"0x561516515165e1d5a651d61512615a156117511479526205181684a13846f11d")

    parser = Parser(stream)

    parser.parse()

    assert not parser._issync

def test_parse_preamble():
    stream = BytesIO(bytes([0x01, 0x02, PREAMBLE, 0x03, 0x01, 0x02, 0x03]))

    parser = Parser(stream)

    parser.parse()

    assert parser._issync

def test_parse_msg():
    stream = BytesIO(
        b'\xd3\x00\xc4>\xc0\x00\x1d\xabVB\xc05\x00DH\x02\xe5\xff\xd1\xf0\x08'
        b'\x00 \x00\x03\xf8\x03\xcc\xe7\xe4\x00!\xaa\xfe\x87\x90\x7fB\x06\xd5'
        b'\x9f\xf0\x0ef\xb5\xa6\x82>\'\xf4\xab\x03\xf7O\xe5V\xff`\x91\xde\xd7'
        b'\xa3\xf1%\xff\xa8R\x1f\xc3\xfbR\x9f\xfaBA\x99\xb9\x7f\x92\xa7\xfdFp'
        b'\x00\xcf\xe9\xce\xff\xd28\x8c\xa9<\xffc\xa1i\xd2\x04\x00\x10\x00\x01'
        b'\xfc\x01\xb4-\x9e\x88\x01\xe2\xcfP\x94\x00(\x03\xce\x1f\x96\x03\x87'
        b'\xf8"\x7f$\x13\xfa>\x01\xf9\x8f\xf8\x9e\xff\xb0 H\x9f\xa9\xfa\x1f'
        b'\x9aT&\x00\x15@\x95\x1f\xfdb\x8e\rTO\xd1\xe6\xfe\x8dp@\x01\x00\x00'
        b'\x1f\xc0\x05\x06\xcc ~\xa6\xdf\xf4l\x03\xf4o\xc4\xcb\xffpy\xa6\xf5'
        b'\xef\xf17?\xa7\xd0\x1f\xb5\x81=\xfei@\xcbP\x0b')

    parser = Parser(stream)

    parser.parse()

    assert parser.error_count == 0

def test_parse_msg_1005():
    stream = BytesIO(bytes(
        [0xd3, 0x00, 0x13, 0x3e, 0xd7, 0xd3, 0x02, 0x02, 0x98, 0x0e, 0xde,
         0xef, 0x34, 0xb4, 0xbd, 0x62, 0xac, 0x09, 0x41, 0x98, 0x6f, 0x33,
         0x36, 0x0b, 0x98]))

    parser = Parser(stream)
    parser.parse()

    assert parser.error_count == 0

    assert parser.msg.type == 1005
    assert parser.msg.station_id == 2003
    assert_almost_equal(parser.msg.ecef_x, 1114104.5999, decimal=4)
    assert_almost_equal(parser.msg.ecef_y, -4850729.7108, decimal=4)
    assert_almost_equal(parser.msg.ecef_z, 3975521.4643, decimal=4)


def test_parser_callback():
    stream = BytesIO(bytes(
        [0xd3, 0x00, 0x13, 0x3e, 0xd7, 0xd3, 0x02, 0x02, 0x98, 0x0e, 0xde,
         0xef, 0x34, 0xb4, 0xbd, 0x62, 0xac, 0x09, 0x41, 0x98, 0x6f, 0x33,
         0x36, 0x0b, 0x98]))

    parser = Parser(stream)

    parsed_msgs = []

    @parser.callback
    def add_msg(msg: ReferenceStationAntenna):
        parsed_msgs.append(msg)

    parser.parse()

    assert parser.error_count == 0

    assert parser.msg.type == 1005
    assert parser.msg.station_id == 2003
    assert_almost_equal(parser.msg.ecef_x, 1114104.5999, decimal=4)
    assert_almost_equal(parser.msg.ecef_y, -4850729.7108, decimal=4)
    assert_almost_equal(parser.msg.ecef_z, 3975521.4643, decimal=4)

    assert len(parsed_msgs) == 1
    msg = parsed_msgs.pop()
    assert msg.type == 1005
    assert msg.station_id == 2003
    assert_almost_equal(msg.ecef_x, 1114104.5999, decimal=4)
    assert_almost_equal(msg.ecef_y, -4850729.7108, decimal=4)
    assert_almost_equal(msg.ecef_z, 3975521.4643, decimal=4)


def test_parse_multiple_msg():
    stream = BytesIO(
        b"""\xd3\x00\x95>\xc0\x00q<\x19"\x90\x1d\x96\xdd\xa4\x02!\x0e\x94\xa4 \x1a\x00/!"""
        b"""\xd3\xd8\xc8\xca\x02P\x0c\x9a\xf6\xa1\x13\x02\xb2\x07z\x9e\xe2\x1a;?\xbd\x01\xe8_\xf4\xca\xc8\x0c@`=\xff\x02\x81\xd8^\x94\x02\xe0\x7f\xa7Q_\xfd\x80\xa3\x8f\xf7\'\xd9\xc0\xab\xa0\x92\xcf\xfd>\x96\xffh\x1a\x8e\xff\xbb\x92\x1d\xd8:\t\x89O\xe9\xb6\x17\xfe@\xf5\x8b\xfe\xb04\xe5\xb9\x88C\xd6\x7fC\xc0\x80I\x0by\xff\xfa\x00\xb0a,\xc1*#\xfaMd\x04\xd0M\x90\x7f\xb4\x10M\xbe2\x10`\x9f\xd1\xac\xaf\xfd\x82\xcbO\xfc\xa8[^\x7f"""
        b"""\xd3\x00\x8a?@\x00fw\xef\x04\x02e\x1e\xd5*\xff\xbar\xd2x\xc4\nP\x088\xb5b\t\x11\x00\x98Q\x0f\xae\xfe\x9a\xad\x05\x04U@\xff\xcb\x9a*\xee\xd8\x9c\x03P\xbf\xa2\x9b@h\x04\x8ao\xf6\xa1\x99\x8e\xd6\xb4\x05B?\xe8\xef\x90\x17\x82*\x8b\xfd\xf0A\xb3\x87\xf3AK\x0f\xfa\x1d4\x07\x80\xd8p\xff\x96\x89j(\x10`#Q\xfe\x9a\x99\x04$\x16H\xbf\xd9\x180\xe5\x0f\xd4\x16\xf2\xff\xa1"""
        b"""\xd3@U\x08\xa5\x9f\xf9\t\x08\'\x15\x9e\x04\xb2\x8f\xe9l\x90<\x01E\x1b\xfd\xd0k\xe4\xf7"""
        b"""\xd3\x00\x95>\xc0\x00q<(\xc2\x90\x1d\x95\xbeP\x02\x8a\xae\xd4\xa4 "@<]\xdb\xd8\xc8\xc4\x9e\x90\x04`\xf6\xa1\x13\x02N\x06s\x9e\xe2\x1a;9]\x81\xdd\xdf\xf4\xca\xe8\x0b\x80^\xee\xff\x02\x81\xd7\x1a4\x02\xef\xbf\xa7R\xdf\xfe\x80\xa5w\xf7\'\xd9\xce\xfa \x91\xfb\xfd>\x96\xffX\x1at\x7f\xbb\x92\x1d\x8d\xdb\t\xaa\xef\xe9\xb5\xb7\xff\xc0\xf9\xc3\xfe\xa44\xe54`D7\xffC\xc0\x80M\x0b\x86\x1f\xfa\x00\xb0}\x0cA)\xc3\xfaM\\\x04\xb8M\x84\xff\xb6\x10M\x8e\xcc\x10j\xbf\xd1\xad/\xfeB\xcc\x93\xfc\xa0\xcd\xe7/"""
        b"""\xd3\x00\x8a?@\x00fxl\x04\x02e\x1e\xc8K\x7f\xb4"\xdax\xc4\x07\xa0\x06\xa3\xb5`\t\x11\x05\xe0!\x0c\x81\xfe\x9a\xb5\x04\xa8Tx\x7f\xcb\x9a*\xec\xf4L\x02\xcf\x7f\xa2\x9d@f\x04j_\xf6\xc1\x99\x8e\x84j\x05S\x9f\xe8\xef\x90\x16B.\xe7\xfd\xf0A\xb3\x88V\xc1I\x7f\xfa\x1dD\x06\xe0\xd8\x0c\xff\x94\x89j0D\xc0%_\xfe\x9a\x9d\x04H\x16\xca?\xd9\x180\xe5K\x0c\x17\x11?\xa1\xd4@Q\x08\xad\x1f\xf9\x89\x08\'K-\x04\xa0\x9f\xe9m\x10:\x81@\x8f\xfd\xd0$\xb0K"""
        b"""\xd3\x00\x95>\xc0\x00q<8b\x90\x1d\x94\x9e\xa0\x03\xdfn\xd4\xa3\xa02@g\x05\xdb\xd8\xc8\xbf5\x80\n+\xf6\xa1\x13\x02\x9c\x07,\xde\xe2\x9a;2\xf8\x01\xe8\xaf\xf4\xca\xb8\x0b\xf0`F\xff\x02\x81\xd5\xd6\\\x01\xbd\xff\xa7Q\xdf\xed\x80\x7f?\xf7\'\xd9\xddH\xc0\x917\xfd>\x9e\xffT\x1a[\x7f\xbb\x92\x1dC\x92\t\x98\xaf\xe9\xb5\xb7\xfe\xe0\xf7{\xfe\xa84\xe4\xafpDe\xffC\xbe\x80O\x0b\x8b\xdf\xfa\x00\xb0\x98\xeb\x81+\x9f\xfaMd\x04\xc8M\xbf\xff\xb4\x10M_b\x10\x87\x9f\xd1\xac`\x00B\xd0/\xfc\xa0tH\x85"""
        b"""\xd3\x00\x8a?@\x00fx\xe9\x04\x02e\x1e\xbbe?\xc3Z\xdaxd\n\x00\nr\xb5b\t\x11\x0b%q\x0f\xf2\xfe\x9a\xb5\x04\xb0US\xff\xcb\x9a*\xeb\x0f\xa8\x03Q\x7f\xa2\x9d@p\x04\x8a\xef\xf6\x81\x99\x8e2%\x05YO\xe8\xefP\x1aB0O\xfd\xf0A\xb3\x88\xb9AK\xd7\xfa\x1dD\x07\xc0\xd8\xa3\xff\x94\x89j8y\x80&\xb3\xfe\x9a\x9d\x04T\x17\x1f\xff\xd9\x180\xe5\x86P\x17b\x7f\xa1\xd1@[\x08\xc1o\xf9i\x08\'\x80\xac\x04\xc7o\xe9mP=\x01JK\xfd\xc0\x19Bj"""
        b"""\xd3\x00\x95>\xc0\x00q<H\x02\x90\x1d\x93\x7f\xe8\x02\xcbN\xd4\xa3\xa0"\x80D\x91\xdb\xd8\xc8\xb9\xd0\xb0\x06\t\xf6\xa1\x13\x02h\x06\xa9^\xe2\x9a;,\xa1\x01\xd5O\xf4\xca\xa8\n\xf0]\xda\xff\x02\x81\xd4\x91\xbc\x02\x98\x7f\xa7R_\xf9\x80\x9a\x8f\xf7\'\xd9\xeb\x95\x80\x95\x87\xfd>\x96\xff\x88\x1a\xe5?\xbb\x92\x1c\xf9G\t\x8d/\xe9\xb5W\xfe\xa0\xf6\x0b\xfe\xb04\xe4*\x88D\xd6\x7fC\xc0\x80V\x0b\x99\xdf\xfa \xb0\xb4\xcb\x01.\xab\xfaMl\x04\xf8N!\x7f\xb4\x10M0\x0e\x10v\x1f\xd1\xad/\xfe\x82\xce\x03\xfc\xa0\xd7<\x1f"""
        b"""\xd3\x00\x8a?@\x00fyf\x04\x02e\x1e\xae\x8e\xff\xae\xb2\xdaxd\x08`\x05@\xb5f\t\x11\x10m\x01\r\xff\xfe\x9a\xa5\x04\xb8T\xd6?\xcb\x9a*\xe9+\x88\x02\xb9\xff\xa2\x9d@Z\x04e\x1f\xf6\xc1\x99\x8d\xdf\xe2\x05Y\xbf\xe8\xef\xd0\x18B0s\xfd\xf0A\xb3\x89 \x01D\xf7\xfa\x1d$\x07 \xd6\xec\xff\x96\x89j@\xaf &\x02\xfe\x9a\x9d\x04,\x16\xf2\x7f\xd9\x180\xe5\xc1\xe0\x17G\xbf\xa1\xd4@_\x08\xba\xcf\xf9I\x08\'\xb60\x04\xf1\xbf\xe9l\x90C\x81T\xe3\xfd\xc0\x00Z&"""
        b"""\xd3\x00\x95>\xc0\x00q<W\xa2\x90\x1d\x92`\xba\x02\xe4\x0e\xd4\xa3\xa0#\x80G\xa9\xdb\xd8\xc8\xb4h\xf0\t\xf8\xf6\xa1\x13\x02\xa2\x07\'\x1e\xe2\xda;&F\x01\xd2\xaf\xf4\xca\xa8\np]\x87\xff\x02\x81"""
        b"""\xd3M\x84\x02\x88?\xa7R_\xfa\x80\x98\x87\xf7\'\xd9\xf9\xe5\x00\x93u\xfd>\x96\xffd\x1a\xa3?\xbb\x92\x1c\xae\xfe\t\x7fO\xe9\xb6\x17\xfd\x80\xf4S\xfe\xac4\xe3\xa6(DQ\x7fC\xc0\x80N\x0b\x89?\xfa \xb0\xd0\xadA,\xf7\xfaMl\x04\xe0M\xea\xff\xb4\x10M\x00\xb8\x10s\x7f\xd1\xado\xffB\xcd\xab\xfc\xa0t\xa1>"""
        b"""\xd3\x00\x8a?@\x00fy\xe3\x04\x02e\x1e\xa1\xa8\xbf\xc6\xc6\xdaxd\n\x10\x0bI\xb7d\t\x11\x15\xb3\xe1\x0e\x10\xfe\x9a\xb1\x04\xe0T\xdb\x7f\xcc\x1a*\xe7G\x14\x03-\x7f\xa2\x9c@h\x04\x81\xcf\xf6\xa1\x99\x8d\x8d\xb5\x05$\xaf\xe8\xf0\x10\x14\x82#3\xfd\xf8A\xb3\x89\x7f\xc1QG\xfa\x1dD\x08 \xda\x00\xff\x98\x89jH\xe4\xd0%W\xfe\x9a\xa9\x04 \x16\xc7\xff\xd9\x180\xe5\xfdT\x17\xc9\xff\xa1"""
        b"""\xd3@k\x08\xdb_\xf9i\x08\'\xeb\xc9\x04\xf8/\xe9l\xd0EAVw\xfd\xb8\x1ez\t"""
        b"""\xd3\x00\x95>\xc0\x00q<gB\x90\x1d\x91A\x98\x02\xe0\x8f\x14\xa4 &\x00GQ\xe3\xd8\xc8\xaf\x00@\x10\xfe\xf6\xa1\x13\x02\xfe\x08\x08>\xe2\xda;\x1f\xe8\x81\xdc\xb7\xf4\xca\xa8\n\xc0^\xc8\xff\x02\x81\xd2\t|\x02\x19\xff\xa7R_\xf5\x00\x8a\xb7\xf7\'\xda\x082\xa0\x96k\xfd>\x96\xff\x9c\x1b\x01\xff\xbb\x92\x1cd\xb3\ty\xcf\xe9\xb5\xf7\xfd\xc0\xf3\xa3\xfe\xb04\xe3!\xf0C\xc5\xffC\xc0\x80J\x0bw\xcf\xf9\xc0\xb0\xec\x8e\xc1.\xf3\xfaMT\x05\x00N)\xff\xb5\x10L\xd1h\x10m\x7f\xd1\xad/\xfe\xc2\xcc\xef\xfc\xb0-]i"""
        b"""\xd3\x00\x8a?@\x00fz`\x04\x02e\x1e\x94\xbe\xff\xec\x1a\xdaxd\r\xc0\x14\xa0\xb7d\t\x11\x1a\xf9q\x11\xbe\xfe\x9a\x99\x04\xd8U\xc6\xff\xcc\x1a*\xe5b\xc4\x03{\x7f\xa2\x9c@i\x04\x95o\xf6\x81\x99\x8d;i\x05=\xdf\xe8\xef\x90\x16\x82)\x83\xfd\xf0A\xb3\x89\xe4\x81R\xa7\xfa\x1dD\x08\x80\xdaX\xff\x98\x89jQ\x1a\x80$\xf2\xfe\x9a\xa9\x04T\x16\xac\xff\xda\x180\xe69 \x17\xc7\xff\xa1"""
        b"""\xd3@h\x08\xda\xff\xf9)\x08(!e\x05\x08\x7f\xe9l\x90F\x81Z\x8b\xfd\xc0L\xc1B"""
        b"""\xd3\x00\x95>\xc0\x00q<v\xe2\x90\x1d\x90"N\x03J/\x14\xa4 )\xc0T\x99\xe3\xd8\xc8\xa9\x9e0\x08G\xf6\xa1\x13\x02\x8e\x06\xf1~\xe3\x1a;\x19\x91\x81\xddW\xf4\xca\xb8\n\xf0^\xdd\xff\x02\x81\xd0\xc5\x08\x02\xd2?\xa7R\xdf\xfd\x80\xa1\xc7\xf7\'\xda\x16\x84`\x8f\xb3\xfd>\x9a\xff8\x1a*\xbf\xbb\x92\x1c\x1ao\te_\xe9\xb6W\xfc@\xf1\x17\xfe\xac4\xe2\x9dPD\x9c\xffC\xc1\x80T\x0b\x92\xaf\xfa\x00\xb1\x08q\x81/\xeb\xfaM|\x04\xf0NG\x7f\xb4\x10L\xa2\x1e\x10a\x9f\xd1\xado\xfd\x82\xcbw\xfc\xb0\x1c\x0f\xdc"""
        b"""\xd3\x00\x8a?@\x00fz\xdd\x04\x02e\x1e\x87\xd4\x00\x18\xba\xdaxd\x12P\x1f\xce\xb7b\t\x11 @\xe1\x11\t\xfe\x9a\x99\x05\x0cU\x99?\xcc\x1a*\xe3~\xc4\x035\xbf\xa2\x9c@c\x04\x84/\xf6\xc1\x99\x8c\xe9-\x050\xaf\xe8\xef\x90\x16B&;\xfe\x00A\xb3\x8aK\x01Q[\xfa\x1d$\x08\x00\xda\x05\xff\x96\x89jYP@$\x92""")

    parser = Parser(stream)

    parser.parse()

    assert parser.error_count == 0
